
XC8Application2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d4  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000311  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca3  00000000  00000000  00000361  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fd  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042a  00000000  00000000  00001601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b6  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000252  00000252  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.command_to_LCD 00000016  00000226  00000226  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.data_to_LCD 00000018  0000020e  0000020e  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.row1    00000054  000000d0  000000d0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.row2    00000054  00000124  00000124  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.row3    00000048  000001c6  000001c6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.row4    0000004e  00000178  00000178  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000064  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  0000025a  0000025a  000002ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  0000025c  0000025c  000002d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  0000025e  0000025e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  0000023c  0000023c  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  00000256  00000256  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
   8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
   c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  10:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  14:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  18:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  1c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  20:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  24:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  28:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  2c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  30:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  34:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  38:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  3c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  40:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  44:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  48:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  4c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
  50:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000252 <__bad_interrupt>:
 252:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.command_to_LCD:

00000226 <command_to_LCD>:
#include <stdio.h>
#include <avr/io.h>
#include <util/delay.h>

void command_to_LCD(unsigned char cmd){
	PORTC = 0x02; // THE RS PIN IS LOW AND THE ENABLE PIN IS HIGH
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	95 bb       	out	0x15, r25	; 21
	PORTD = cmd;
 22a:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x00; // THE RS PIN IS LOW AND THE ENABLE PIN IS LOW
 22c:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <command_to_LCD+0xc>
 236:	00 c0       	rjmp	.+0      	; 0x238 <command_to_LCD+0x12>
 238:	00 00       	nop
 23a:	08 95       	ret

Disassembly of section .text.data_to_LCD:

0000020e <data_to_LCD>:
	_delay_ms(10); // TO ENSURE LCD HAS ENOUGH TIME TO PROCESS THE COMMAND
}

void data_to_LCD(unsigned char data){
	PORTC = 0x03; // THE RS PIN IS HIGH AND THE ENABLE PIN IS HIGH
 20e:	93 e0       	ldi	r25, 0x03	; 3
 210:	95 bb       	out	0x15, r25	; 21
	PORTD = data;
 212:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x01; // THE RS PIN IS LOW AND THE ENABLE PIN IS LOW
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	85 bb       	out	0x15, r24	; 21
 218:	8f e3       	ldi	r24, 0x3F	; 63
 21a:	9c e9       	ldi	r25, 0x9C	; 156
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <data_to_LCD+0xe>
 220:	00 c0       	rjmp	.+0      	; 0x222 <data_to_LCD+0x14>
 222:	00 00       	nop
 224:	08 95       	ret

Disassembly of section .text.row1:

000000d0 <row1>:
}

void row1(){
	
	
	PORTB = 0x01; // SET THE FIRST PIN OF PORT B HIGH
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	88 bb       	out	0x18, r24	; 24
	
	if(PINA == 0x01){
  d4:	89 b3       	in	r24, 0x19	; 25
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	39 f4       	brne	.+14     	; 0xe8 <row1+0x18>
		 data_to_LCD('D');
  da:	84 e4       	ldi	r24, 0x44	; 68
  dc:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
		 command_to_LCD(0x06);		
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
  e6:	08 95       	ret
	} else if (PINA == 0x02){
  e8:	89 b3       	in	r24, 0x19	; 25
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	39 f4       	brne	.+14     	; 0xfc <row1+0x2c>
		 data_to_LCD('A');
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
		 command_to_LCD(0x06);	
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
  fa:	08 95       	ret
		
	} else if (PINA == 0x04){
  fc:	89 b3       	in	r24, 0x19	; 25
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	39 f4       	brne	.+14     	; 0x110 <row1+0x40>
		 data_to_LCD('N');
 102:	8e e4       	ldi	r24, 0x4E	; 78
 104:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
		 command_to_LCD(0x06);	
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 10e:	08 95       	ret
		
	} else if (PINA == 0x08){
 110:	89 b3       	in	r24, 0x19	; 25
 112:	88 30       	cpi	r24, 0x08	; 8
 114:	31 f4       	brne	.+12     	; 0x122 <row1+0x52>
	     data_to_LCD('I');
 116:	89 e4       	ldi	r24, 0x49	; 73
 118:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
	     command_to_LCD(0x06);	
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 122:	08 95       	ret

Disassembly of section .text.row2:

00000124 <row2>:
    }
}

void row2(){
	
   PORTB = 0x02; // SET THE SECOND PIN OF PORT B HIGH
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	88 bb       	out	0x18, r24	; 24
   
   if(PINA == 0x01){
 128:	89 b3       	in	r24, 0x19	; 25
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	39 f4       	brne	.+14     	; 0x13c <row2+0x18>
	    data_to_LCD('E');
 12e:	85 e4       	ldi	r24, 0x45	; 69
 130:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
	    command_to_LCD(0x06);	
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 13a:	08 95       	ret
	   } else if (PINA == 0x02){
 13c:	89 b3       	in	r24, 0x19	; 25
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	39 f4       	brne	.+14     	; 0x150 <row2+0x2c>
	       data_to_LCD('L');
 142:	8c e4       	ldi	r24, 0x4C	; 76
 144:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
	       command_to_LCD(0x06);	
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 14e:	08 95       	ret
	   
	   } else if (PINA == 0x04){
 150:	89 b3       	in	r24, 0x19	; 25
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	39 f4       	brne	.+14     	; 0x164 <row2+0x40>
	       data_to_LCD('1');
 156:	81 e3       	ldi	r24, 0x31	; 49
 158:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
	       command_to_LCD(0x06);	
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 162:	08 95       	ret
	   
	   } else if (PINA == 0x08){
 164:	89 b3       	in	r24, 0x19	; 25
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	31 f4       	brne	.+12     	; 0x176 <row2+0x52>
	       data_to_LCD('2');
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
	       command_to_LCD(0x06);	
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 176:	08 95       	ret

Disassembly of section .text.row3:

000001c6 <row3>:
   }	
}

void row3(){
	
	PORTB = 0x04; // SET THE THIRD PIN OF PORT B HIGH
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	88 bb       	out	0x18, r24	; 24
	
	if(PINA == 0x01){
 1ca:	89 b3       	in	r24, 0x19	; 25
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	39 f4       	brne	.+14     	; 0x1de <row3+0x18>
		 data_to_LCD('3');
 1d0:	83 e3       	ldi	r24, 0x33	; 51
 1d2:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
	     command_to_LCD(0x06);	
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 1dc:	08 95       	ret
		} else if (PINA == 0x02){
 1de:	89 b3       	in	r24, 0x19	; 25
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <row3+0x2c>
		 data_to_LCD(' ');
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
	     command_to_LCD(0x06);	// SHIFT CURSOR TO RIGHT
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 1f0:	08 95       	ret
		
		} else if (PINA == 0x04){
 1f2:	89 b3       	in	r24, 0x19	; 25
 1f4:	84 30       	cpi	r24, 0x04	; 4
 1f6:	21 f4       	brne	.+8      	; 0x200 <row3+0x3a>
		command_to_LCD(0x01); // CLEAR THE DISPLAY
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 1fe:	08 95       	ret
		
		} else if (PINA == 0x08){
 200:	89 b3       	in	r24, 0x19	; 25
 202:	88 30       	cpi	r24, 0x08	; 8
 204:	19 f4       	brne	.+6      	; 0x20c <row3+0x46>
		command_to_LCD(0x80); // CURSOR TO BEGIN IN FIRST LINE
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 20c:	08 95       	ret

Disassembly of section .text.row4:

00000178 <row4>:
		
	}
}

void row4(){
	PORTB = 0x08; // SET THE FOURTH PIN OF PORT B HIGH
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	88 bb       	out	0x18, r24	; 24
	
	if(PINA == 0x01){
 17c:	89 b3       	in	r24, 0x19	; 25
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	21 f4       	brne	.+8      	; 0x18a <row4+0x12>
		command_to_LCD(0xc0); // CURSOR TO BEGIN IN THE SECOND LINE
 182:	80 ec       	ldi	r24, 0xC0	; 192
 184:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 188:	08 95       	ret
		
		} else if (PINA == 0x02){
 18a:	89 b3       	in	r24, 0x19	; 25
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	39 f4       	brne	.+14     	; 0x19e <row4+0x26>
			
		data_to_LCD('*');
 190:	8a e2       	ldi	r24, 0x2A	; 42
 192:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
		command_to_LCD(0x06);
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 19c:	08 95       	ret
		
		} else if (PINA == 0x04){
 19e:	89 b3       	in	r24, 0x19	; 25
 1a0:	84 30       	cpi	r24, 0x04	; 4
 1a2:	39 f4       	brne	.+14     	; 0x1b2 <row4+0x3a>
		data_to_LCD('.');
 1a4:	8e e2       	ldi	r24, 0x2E	; 46
 1a6:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
		command_to_LCD(0x06);
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 1b0:	08 95       	ret
		
		} else if (PINA == 0x08){
 1b2:	89 b3       	in	r24, 0x19	; 25
 1b4:	88 30       	cpi	r24, 0x08	; 8
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <row4+0x4c>
		data_to_LCD('#');
 1b8:	83 e2       	ldi	r24, 0x23	; 35
 1ba:	0e 94 07 01 	call	0x20e	; 0x20e <data_to_LCD>
		command_to_LCD(0x06);
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
 1c4:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
}



int main(void){
	DDRA = 0x00; // PORT A SET AS INPUT
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xff; // PORT B SET AS OUTPUT
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff; // PORT C SET AS OUTPUT
  72:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff; // PORT D SET AS OUTPUT
  74:	81 bb       	out	0x11, r24	; 17
	command_to_LCD(0x38); // ACTIVATE THE TWO LINES(ROWS)
  76:	88 e3       	ldi	r24, 0x38	; 56
  78:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
	command_to_LCD(0x0f); // DISPLAY ON CURSOR BLINKING
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
	command_to_LCD(0x01); // CLEAR SCREEN
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
	command_to_LCD(0x80); // CURSOR TO THE FIRST LINE
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	0e 94 13 01 	call	0x226	; 0x226 <command_to_LCD>
    while(1)
    {
        //TODO:: Please write your application code 
		row1(); 
  8e:	0e 94 68 00 	call	0xd0	; 0xd0 <row1>
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x2a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
		_delay_ms(5);
		row2();
  9e:	0e 94 92 00 	call	0x124	; 0x124 <row2>
  a2:	8f e1       	ldi	r24, 0x1F	; 31
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
		_delay_ms(5);
		row3();
  ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <row3>
  b2:	8f e1       	ldi	r24, 0x1F	; 31
  b4:	9e e4       	ldi	r25, 0x4E	; 78
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
		_delay_ms(5);
		row4();
  be:	0e 94 bc 00 	call	0x178	; 0x178 <row4>
  c2:	8f e1       	ldi	r24, 0x1F	; 31
  c4:	9e e4       	ldi	r25, 0x4E	; 78
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x5a>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
  ce:	df cf       	rjmp	.-66     	; 0x8e <main+0x22>

Disassembly of section .text.__dummy_fini:

0000025a <_fini>:
 25a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000025c <__funcs_on_exit>:
 25c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000025e <__simulator_exit>:
 25e:	08 95       	ret

Disassembly of section .text.exit:

0000023c <exit>:
 23c:	ec 01       	movw	r28, r24
 23e:	0e 94 2e 01 	call	0x25c	; 0x25c <__funcs_on_exit>
 242:	0e 94 2d 01 	call	0x25a	; 0x25a <_fini>
 246:	ce 01       	movw	r24, r28
 248:	0e 94 2f 01 	call	0x25e	; 0x25e <__simulator_exit>
 24c:	ce 01       	movw	r24, r28
 24e:	0e 94 2b 01 	call	0x256	; 0x256 <_Exit>

Disassembly of section .text._Exit:

00000256 <_Exit>:
 256:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
